pipeline {
    agent any

    environment {
        OS_SSH_KEY = credentials('OS_SSH_KEY')
        REPO_URL = 'git@git.cardiff.ac.uk:c23051986/teamatramshedtech.git'
        PROJECT_DIR = 'eventmanagement'
        GIT_CREDS = credentials('NITHIN_GIT_CREDS')
        AWS_CREDS = credentials('AWS_CREDS')
        AWS_INSTANCE_IP = '16.171.36.15'
    }

    parameters {
        booleanParam(
                name: 'KEEP_RUNNING',
                defaultValue: true,
                description: 'Check the box to keep the project running after it starts, or Uncheck to stop it after a few minutes.'
        )
    }

    stages {
        stage('Get instance IP') {
            steps {
                script {
                    echo 'Attempting to copy artifacts from InfraCreation job...'
                    // Copy the instance_ip.txt file from the previous job
                    copyArtifacts(
                        projectName: 'TramshedTechProject_InfraCreation',
                        filter: 'instance_ip.txt',
                        target: 'artifacts',
                        selector: lastSuccessful()
                    )
                    echo 'Artifacts copied. Reading instance IP...'
                    env.INSTANCE_IP = readFile('artifacts/instance_ip.txt').trim()
                    sh 'echo "Instance IP: $INSTANCE_IP"'
                }
            }
        }

        stage('Environment Check on Instance') {
            steps {
                script {
                    if (env.INSTANCE_IP) {
                        sh '''
ssh -i $OS_SSH_KEY -o StrictHostKeyChecking=no rocky@${INSTANCE_IP} << EOF
# Check if Git is installed
if ! type git >/dev/null 2>&1; then
    echo "Git is not installed on the instance."
    exit 1
fi
# Check if Java is installed
if ! type java >/dev/null 2>&1; then
    echo "Java is not installed on the instance."
    exit 1
fi
# Check if Gradle is installed
if ! type gradle >/dev/null 2>&1; then
    echo "Gradle is not installed on the instance."
    exit 1
fi
EOF
'''
                        sh 'echo "Environment check completed on the instance."'
                    } else {
                        error "Instance IP is not available."
                    }
                }
            }
        }

        stage('Clone Project to Instance') {
            steps {
                script {
                    if (env.INSTANCE_IP) {
                        def encodedUsername = URLEncoder.encode(GIT_CREDS_USR, "UTF-8")
                        def encodedPassword = URLEncoder.encode(GIT_CREDS_PSW, "UTF-8")

                        // Clone the repository to the instance
                        sh """
ssh -i $OS_SSH_KEY -o StrictHostKeyChecking=no rocky@${INSTANCE_IP} << EOF
# Remove existing directory if it exists
if [ -d "teamatramshedtech" ]; then
    rm -rf teamatramshedtech
fi

# Clone the repository
git clone https://${encodedUsername}:${encodedPassword}@git.cardiff.ac.uk/c23051986/teamatramshedtech.git
"""
                        sleep 30
                        sh 'echo "Project cloned to the instance."'
                    } else {
                        error "Instance IP is not available."
                    }
                }
            }
        }


        stage('Build') {
            steps {
                script {
                    if (env.INSTANCE_IP) {
                        // Build commands on the instance
                        sh """
ssh -i $OS_SSH_KEY -o StrictHostKeyChecking=no rocky@${INSTANCE_IP} << EOF
cd teamatramshedtech
chmod +x gradlew
./gradlew clean build 
EOF
"""
                        sh 'echo "Build Project on the instance."'
                    } else {
                        error "Instance IP is not available."
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    if (env.INSTANCE_IP) {
                        // Test commands on the instance
                        sh """
ssh -i $OS_SSH_KEY -o StrictHostKeyChecking=no rocky@${INSTANCE_IP} << EOF
cd teamatramshedtech
./gradlew test
./gradlew jacocoTestReport 
EOF
"""
                        sh 'echo "Test Project on the instance."'
                    } else {
                        error "Instance IP is not available."
                    }
                }
            }
        }

        stage('Run Project') {
            steps {
                script {
                    if (env.INSTANCE_IP) {
                        // Run project on the instance in the background
                        sh """
ssh -i $OS_SSH_KEY -o StrictHostKeyChecking=no rocky@${INSTANCE_IP} << EOF
cd teamatramshedtech
nohup java -jar build/libs/eventmanagement-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
echo \$! > app.pid
EOF
"""
                        sh 'echo "Application started in the background on the instance."'

                        // Conditionally stop the application based on the KEEP_RUNNING parameter
                        if (!params.KEEP_RUNNING) {
                            sh 'sleep 60'  // Wait for 60 seconds to let the application run

                            // Stop the application
                            sh """
                            ssh -i $OS_SSH_KEY -o StrictHostKeyChecking=no rocky@${INSTANCE_IP} << EOF
                            cd teamatramshedtech/eventmanagement
                            if [ -f app.pid ]; then
                                kill \$(cat app.pid)
                                echo "Application stopped."
                                rm app.pid
                            fi
                            EOF
                            """
                        }
                    } else {
                        error "Instance IP is not available."
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                if (env.INSTANCE_IP) {
                    junit '**/build/test-results/test/*.xml' // For publishing unit test results
                    jacoco  classPattern: '**/build/classes',
                            exclusionPattern: '**/Test*.class',
                            execPattern: '**/build/jacoco/**.exec',
                            sourceInclusionPattern: '**/*.java'  // For publishing JaCoCo coverage results
                    // Archived log files
                    archiveArtifacts artifacts: 'eventmanagement/app.log', allowEmptyArchive: true
                    sh 'echo "Logs have been archived."'

                    // Clean up log files
                    sh '''
ssh -i $OS_SSH_KEY -o StrictHostKeyChecking=no rocky@${INSTANCE_IP} << EOF
rm -rf ${PROJECT_DIR}/*.log
EOF
'''
                } else {
                    echo "Instance IP is not available, skipping cleanup."
                }
            }
        }
        success {
            sh 'echo "Pipeline completed successfully!"'
            // Copy the jar file to the AWS instance
            sh """
ssh -i $OS_SSH_KEY -o StrictHostKeyChecking=no rocky@${INSTANCE_IP} << EOF
scp -i $AWS_CREDS  -o StrictHostKeyChecking=no teamatramshedtech/build/libs/eventmanagement-0.0.1-SNAPSHOT.jar ec2-user@${AWS_INSTANCE_IP}:~
EOF
"""
        }
        failure {
            sh 'echo "Pipeline failed!"'
        }
    }
}

