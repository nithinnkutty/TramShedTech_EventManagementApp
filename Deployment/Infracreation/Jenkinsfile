pipeline {
    agent any

    environment {
        OS_PASSWORD = credentials('openstackpass_nithin')
        OS_SSH_KEY = credentials('OS_SSH_KEY')
    }

    stages {
        stage('Create Infrastructure') {
            steps {
                script {
                    dir("${WORKSPACE}/Deployment/Infracreation/Terraform/") {
                        sh '''
                            ls
                            pwd
                            chmod +x GROUP-1-TGD-2425-openrc.sh
                            source ${PWD}/GROUP-1-TGD-2425-openrc.sh

                            terraform init -input=false
                            terraform plan
                            terraform apply -auto-approve
                        '''
                        env.INSTANCE_IP = sh(script: "terraform output -raw instance_ip", returnStdout: true).trim()
                        // Save the instance IP to a file
                        writeFile file: 'instance_ip.txt', text: env.INSTANCE_IP
                        archiveArtifacts artifacts: 'instance_ip.txt', allowEmptyArchive: true
                    }
                }
            }
        }

        stage('Check Instance Readiness') {
            steps {
                script {
                    if (env.INSTANCE_IP) {
                        // Retry mechanism to check instance readiness
                        timeout(time: 2, unit: 'MINUTES') {
                            waitUntil {
                                def ready = sh(script: "ssh -i $OS_SSH_KEY -o StrictHostKeyChecking=no rocky@${INSTANCE_IP} 'echo ready'", returnStatus: true) == 0
                                return ready
                            }
                        }
                    } else {
                        error "Instance IP is not available."
                    }
                }
            }
        }

        stage('Install Java and Gradle') {
            steps {
                script {
                    sh 'echo "Install Java and Gradle after infra creation"'
                    sh """
ssh -i $OS_SSH_KEY -o StrictHostKeyChecking=no rocky@${env.INSTANCE_IP} << EOF
sudo yum update -y
sudo yum install wget -y
echo "Installing Git"
sudo yum install git -y
echo "Adding git.cardiff.ac.uk public key to jenkins known_hosts"
ssh-keyscan git.cardiff.ac.uk >> ~/.ssh/known_hosts
chmod 644 ~/.ssh/known_hosts
echo "Installing Java"
sudo yum install -y java-17-openjdk
java -version
echo "Installing unzip and Gradle"
sudo yum install unzip -y
wget https://services.gradle.org/distributions/gradle-8.0-bin.zip
sudo mkdir /opt/gradle
sudo unzip -d /opt/gradle gradle-8.0-bin.zip
echo "export PATH=\$PATH:/opt/gradle/gradle-8.0/bin" >> ~/.bash_profile
source ~/.bash_profile
gradle -v
EOF
"""
                }
            }
        }

                stage('Install and Start MinIO') {
                    steps {
                        script {
                            withCredentials([sshUserPrivateKey(credentialsId: 'OS_SSH_KEY', keyFileVariable: 'SSH_KEY_PATH')]) {
                                sh """
ssh -i \$SSH_KEY_PATH -o StrictHostKeyChecking=no rocky@${env.INSTANCE_IP} << EOF
sudo wget https://dl.min.io/server/minio/release/linux-amd64/minio
sudo chmod +x minio
sudo mv minio /usr/local/bin/
sudo mkdir -p /data/minio
sudo mkdir -p /etc/minio
sudo chown -R rocky:rocky /data/minio
sudo chmod -R u+rwX /data/minio
sudo nohup minio server /data/minio --console-address ":9001" &
EOF
"""
                            }
                        }
                    }
                }

                stage('Install MinIO Client mc') {
                    steps {
                        script {
                            withCredentials([sshUserPrivateKey(credentialsId: 'OS_SSH_KEY', keyFileVariable: 'SSH_KEY_PATH')]) {
                                sh """
ssh -i \$SSH_KEY_PATH -o StrictHostKeyChecking=no rocky@${env.INSTANCE_IP} << EOF
wget https://dl.min.io/client/mc/release/linux-amd64/mc
chmod +x mc
sudo mv mc /usr/local/bin/
EOF
"""
                            }
                        }
                    }
                }

                stage('Create MinIO Bucket and Set Public Access') {
                    steps {
                        script {
                            withCredentials([sshUserPrivateKey(credentialsId: 'OS_SSH_KEY', keyFileVariable: 'SSH_KEY_PATH')]) {
                                sh """
ssh -i \$SSH_KEY_PATH -o StrictHostKeyChecking=no rocky@${env.INSTANCE_IP} << EOF
mc alias set myminio http://${env.INSTANCE_IP}:9000 minioadmin minioadmin
mc mb myminio/avatar
mc policy set public myminio/avatar
EOF
"""
                            }
                        }
                    }
                }

                stage('Configure MinIO') {
                    steps {
                        script {
                           withCredentials([sshUserPrivateKey(credentialsId: 'OS_SSH_KEY', keyFileVariable: 'SSH_KEY_PATH')]) {
                              def configContent = """
minio.endpoint=http://${env.INSTANCE_IP}:9000
minio.accessKey=minioadmin
minio.secretKey=minioadmin
minio.bucketName=avatar
"""
                              writeFile file: 'minio.properties', text: configContent
                              sh """
ssh -i $OS_SSH_KEY -o StrictHostKeyChecking=no rocky@${env.INSTANCE_IP} << EOF
sudo mkdir -p /etc/minio
EOF
"""
                              sh "scp -i $OS_SSH_KEY ${WORKSPACE}/minio.properties rocky@${env.INSTANCE_IP}:/etc/minio/minio.properties"
                               }
                           }
                    }
               }
    }

    post {
        success {
            script {
                // Trigger the Build and Run Project pipeline
                build job: 'TramshedTechProject_Deployment', wait: false
                sh 'echo "Instance Creation Completed..!!"'
            }
        }
    }
}
