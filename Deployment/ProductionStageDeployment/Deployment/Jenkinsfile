pipeline {
    agent any

    environment {
        AWS_SSH_KEY = credentials('AWS_CREDS')  // Use the AWS PEM file for SSH access
        PROJECT_DIR = 'teamatramshedtech'
        GIT_CREDS = credentials('NITHIN_GIT_CREDS')
    }

    stages {
        stage('Get instance IP') {
            steps {
                script {
                    echo 'Attempting to copy artifacts from InfraCreation job...'
                    // Copy the instance_ip.txt file from the previous job
                    copyArtifacts(
                            projectName: 'TramShedTech_Production_Infracreation',
                            filter: 'instance_ip.txt',
                            target: 'artifacts',
                            selector: lastSuccessful()
                    )
                    echo 'Artifacts copied. Reading instance IP...'
                    env.INSTANCE_IP = readFile('artifacts/instance_ip.txt').trim()
                    sh 'echo "Instance IP: $INSTANCE_IP"'
                }
            }
        }

        stage('Clone Project to AWS Instance') {
            steps {
                script {
                    if (env.INSTANCE_IP) {
                        def encodedUsername = URLEncoder.encode(GIT_CREDS_USR, "UTF-8")
                        def encodedPassword = URLEncoder.encode(GIT_CREDS_PSW, "UTF-8")

                        // Clone the repository to the instance
                        sh """
ssh -i $AWS_SSH_KEY -o StrictHostKeyChecking=no ec2-user@${INSTANCE_IP} << EOF
# Remove existing directory if it exists
if [ -d "${PROJECT_DIR}" ]; then
    rm -rf ${PROJECT_DIR}
fi

# Clone the repository
git clone https://${encodedUsername}:${encodedPassword}@git.cardiff.ac.uk/c23051986/teamatramshedtech.git

# Navigate to the repository directory
cd ${PROJECT_DIR}

# Checkout to the specific branch
git checkout 82_Deploy_project_to_production_environment
EOF
"""
                        sleep 30
                        sh 'echo "Project cloned to the AWS instance."'
                    } else {
                        error "Instance IP is not available."
                    }
                }
            }
        }

        stage('Build Project on AWS Instance') {
            steps {
                script {
                    if (env.INSTANCE_IP) {
                        timeout(time: 10, unit: 'MINUTES') {
                            // Build commands on the AWS instance
                            sh """
ssh -i $AWS_SSH_KEY -o StrictHostKeyChecking=no ec2-user@${INSTANCE_IP} << EOF
# Fail the script on any error
set -e
cd ${PROJECT_DIR}
chmod +x gradlew
./gradlew clean
./gradlew build --no-daemon
EOF
"""
                            sh 'echo "Project built on the AWS instance."'
                        }
                    } else {
                        error "Instance IP is not available."
                    }
                }
            }
        }

        stage('Run Project on AWS Instance') {
            steps {
                script {
                    if (env.INSTANCE_IP) {
                        // Run project on the AWS instance in the background
                        sh """
ssh -i $AWS_SSH_KEY -o StrictHostKeyChecking=no ec2-user@${INSTANCE_IP} << EOF
# Fail the script on any error
set -e
cd ${PROJECT_DIR}

# Check if the jar file exists
if [ ! -f build/libs/eventmanagement-0.0.1-SNAPSHOT.jar ]; then
    echo "Jar file not found! Exiting."
    exit 1
fi
nohup java -jar build/libs/eventmanagement-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
echo \$! > app.pid
EOF
"""
                        sh 'echo "Application started in the background on the AWS instance."'
                    } else {
                        error "Instance IP is not available."
                    }
                }
            }
        }
    }

    post {
        success {
            sh 'echo "Pipeline completed successfully!"'
        }
        failure {
            sh 'echo "Pipeline failed!"'
        }
    }
}
