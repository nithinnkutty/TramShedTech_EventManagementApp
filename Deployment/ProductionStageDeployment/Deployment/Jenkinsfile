pipeline {
    agent any

    environment {
        AWS_SSH_KEY = credentials('AWS_CREDS')  // Use the AWS PEM file for SSH access
    }

    stages {
        stage('Get instance IP') {
            steps {
                script {
                    echo 'Attempting to copy artifacts from InfraCreation job...'
                    // Copy the instance_ip.txt file from the previous job
                    copyArtifacts(
                            projectName: 'TramShedTech_Production_Infracreation',
                            filter: 'instance_ip.txt',
                            target: 'artifacts',
                            selector: lastSuccessful()
                    )
                    echo 'Artifacts copied. Reading instance IP...'
                    env.INSTANCE_IP = readFile('artifacts/instance_ip.txt').trim()
                    sh 'echo "Instance IP: $INSTANCE_IP"'

                    // Set the build description to include the instance IP
                    currentBuild.description = "Deployed to Instance with IP: http://${env.INSTANCE_IP}:8082"
                }
            }
        }

        stage('Build Project') {
            steps {
                script {
                    dir("${WORKSPACE}") {
                        if (env.INSTANCE_IP) {
                            timeout(time: 10, unit: 'MINUTES') {
                                // Build commands on the AWS instance
                                sh '''
                                    # Fail the script on any error
                                    set -e
                                    chmod +x gradlew
                                    
                                    # Run the Gradle build and redirect output to a log file
                                    ./gradlew clean build --no-daemon  >> gradle_build.log 2>&1
                                    
                                    # Check if the build was successful by looking for the JAR file
                                    if [ ! -f build/libs/eventmanagement-0.0.1-SNAPSHOT.jar ]; then
                                        echo "Build failed. JAR file not found." >> gradle_build.log 2>&1
                                        exit 1
                                    fi
                                    '''
                                sh 'echo "Project built completed."'
                            }
                        } else {
                            error "Instance IP is not available."
                        }
                    }
                }
            }
        }

        stage('Run Project on AWS Instance') {
            steps {
                script {
                    dir("${WORKSPACE}") {
                        if (env.INSTANCE_IP) {
                            // Run project on the AWS instance in the background
                            sh """
scp -i $AWS_SSH_KEY -o StrictHostKeyChecking=no build/libs/eventmanagement-0.0.1-SNAPSHOT.jar ec2-user@${INSTANCE_IP}:~ 
ssh -i $AWS_SSH_KEY -o StrictHostKeyChecking=no ec2-user@${INSTANCE_IP} << EOF
# Fail the script on any error
set -e

nohup java -jar eventmanagement-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
echo \$! > app.pid
EOF
"""
                            sh 'echo "Application started in the background on the AWS instance."'
                        } else {
                            error "Instance IP is not available."
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            sh 'echo "Pipeline completed successfully!"'
        }
        failure {
            sh 'echo "Pipeline failed!"'
        }
    }
}
